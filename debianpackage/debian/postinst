#!/bin/sh
# postinst script for M4_ONLYOFFICE_VALUE
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

. /usr/share/debconf/confmodule

DIR="/var/www/onlyoffice/documentserver"
LOG_DIR="/var/log/onlyoffice/documentserver"
APP_DIR="/var/lib/onlyoffice/documentserver"
CONF_DIR="/etc/onlyoffice/documentserver"
LOCAL_CONFIG=${CONF_DIR}/local.json
EXAMPLE_CONFIG=${CONF_DIR}-example/local.json
JSON_BIN="$DIR/npm/json"
JSON="$JSON_BIN -I -q -f $LOCAL_CONFIG"
JSON_EXAMPLE="$JSON_BIN -I -q -f ${EXAMPLE_CONFIG}"

OLD_VERSION="$2"

DB_TYPE=""
DB_HOST=""
DB_PORT=""
DB_USER=""
DB_PWD=""
DB_NAME=""

RABBITMQ_HOST=""
RABBITMQ_USER=""
RABBITMQ_PWD=""

REDIS_HOST=""

CLUSTER_MODE=""

create_local_configs(){
	for i in $LOCAL_CONFIG $EXAMPLE_CONFIG; do
		if [ -d $(dirname ${i}) -a ! -f ${i} ]; then
			echo {} > ${i}
		fi
  	done
}

read_saved_params(){
	db_get onlyoffice/db-type || true
	DB_TYPE="$RET"
	db_get onlyoffice/db-host || true
	DB_HOST="$RET"
	db_get onlyoffice/db-port || true
	DB_PORT="$RET"
	db_get onlyoffice/db-user || true
	DB_USER="$RET"
	db_get onlyoffice/db-pwd || true
	DB_PWD="$RET"
	db_get onlyoffice/db-name || true
	DB_NAME="$RET"

	db_get onlyoffice/rabbitmq-host || true
	RABBITMQ_HOST="$RET"
	db_get onlyoffice/rabbitmq-user || true
	RABBITMQ_USER="$RET"
	db_get onlyoffice/rabbitmq-pwd || true
	RABBITMQ_PWD="$RET"

	db_get onlyoffice/cluster-mode || true
	CLUSTER_MODE="$RET"

	db_get onlyoffice/jwt-enabled || true
	JWT_ENABLED="$RET"
	db_get onlyoffice/jwt-secret || true
	JWT_SECRET="$RET"
	db_get onlyoffice/jwt-header || true
	JWT_HEADER="$RET"
}

install_db() {
	case $DB_TYPE in
		"postgres")
			install_postges
			;;
		"mariadb"|"mysql")
			install_mysql
			;;
		*)
			echo "ERROR: unknown database type"
			exit 1
			;;
	esac
}

install_postges() {
	if [ -n $DB_PWD ]; then
		export PGPASSWORD="$DB_PWD"
	fi
	PSQL="psql -q -h$DB_HOST -p${DB_PORT:="5432"} -d$DB_NAME -U$DB_USER -w"
	# test postgresql connection
	set +e
		$PSQL -c ";" &>/dev/null
		ERRCODE=$?
		if [ $ERRCODE -ne 0 ]; then
			service postgresql start &>/dev/null
			$PSQL -c ";" &>/dev/null || \
				{ echo "ERROR: can't connect to postgressql database"; exit 1; }
		fi
	set -e
		if [ ! $CLUSTER_MODE = true ]; then
			$PSQL -f "$DIR/server/schema/postgresql/removetbl.sql" \
				>/dev/null 2>&1
		fi
		$PSQL -f "$DIR/server/schema/postgresql/createdb.sql" \
			>/dev/null 2>&1
}

install_mysql() {
	CONNECTION_PARAMS="-h$DB_HOST -P${DB_PORT:="3306"} -u$DB_USER -p$DB_PWD -w"
	MYSQL="mysql -q $CONNECTION_PARAMS"
	# test mysql connection
	set +e
		$MYSQL -e ";" &>/dev/null
		ERRCODE=$?
		if [ $ERRCODE -ne 0 ]; then
			service mysql start &>/dev/null
			$MYSQL -e ";" &>/dev/null || \
				{ echo "ERROR: can't connect to mysql database"; exit 1; }
		fi
	set -e
		if ! $MYSQL -e "SHOW DATABASES;" | cut -d\| -f 1 | grep -qw $DB_NAME; then
			$MYSQL -e \
				"CREATE DATABASE IF NOT EXISTS $DB_NAME \
				DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;" \
				>/dev/null 2>&1
		fi
		if [ ! $CLUSTER_MODE = true ]; then
			$MYSQL $DB_NAME < "$DIR/server/schema/mysql/removetbl.sql" >/dev/null 2>&1
		fi
		$MYSQL $DB_NAME < "$DIR/server/schema/mysql/createdb.sql" >/dev/null 2>&1
}

save_db_params(){
  $JSON -e "if(this.services===undefined)this.services={};"
  $JSON -e "if(this.services.CoAuthoring===undefined)this.services.CoAuthoring={};"
  $JSON -e "if(this.services.CoAuthoring.sql===undefined)this.services.CoAuthoring.sql={};" >/dev/null 2>&1
  $JSON -e "this.services.CoAuthoring.sql.type = '$DB_TYPE'"
  $JSON -e "this.services.CoAuthoring.sql.dbHost = '$DB_HOST'"
  $JSON -e "this.services.CoAuthoring.sql.dbPort = '$DB_PORT'"
  $JSON -e "this.services.CoAuthoring.sql.dbName = '$DB_NAME'"
  $JSON -e "this.services.CoAuthoring.sql.dbUser = '$DB_USER'"
  $JSON -e "this.services.CoAuthoring.sql.dbPass = '$DB_PWD'"
}

save_rabbitmq_params(){
  $JSON -e "if(this.rabbitmq===undefined)this.rabbitmq={};"
  $JSON -e "this.rabbitmq.url = 'amqp://$RABBITMQ_USER:$RABBITMQ_PWD@$RABBITMQ_HOST'"
}

save_redis_params(){
  $JSON -e "if(this.services===undefined)this.services={};"
  $JSON -e "if(this.services.CoAuthoring===undefined)this.services.CoAuthoring={};"
  $JSON -e "if(this.services.CoAuthoring.redis===undefined)this.services.CoAuthoring.redis={};"
  $JSON -e "this.services.CoAuthoring.redis.host = '$REDIS_HOST'"
}

save_jwt_params(){
  ${JSON} -e "if(this.services===undefined)this.services={};"
  ${JSON} -e "if(this.services.CoAuthoring===undefined)this.services.CoAuthoring={};"
  ${JSON} -e "if(this.services.CoAuthoring.token===undefined)this.services.CoAuthoring.token={};"

  if [ "${JWT_ENABLED}" = "true" ] || [ "${JWT_ENABLED}" = "false" ]; then
    ${JSON} -e "if(this.services.CoAuthoring.token.enable===undefined)this.services.CoAuthoring.token.enable={};"
    ${JSON} -e "if(this.services.CoAuthoring.token.enable.request===undefined)this.services.CoAuthoring.token.enable.request={};"
    ${JSON} -e "this.services.CoAuthoring.token.enable.browser = ${JWT_ENABLED}"
    ${JSON} -e "this.services.CoAuthoring.token.enable.request.inbox = ${JWT_ENABLED}"
    ${JSON} -e "this.services.CoAuthoring.token.enable.request.outbox = ${JWT_ENABLED}"
  fi
  
  ${JSON} -e "if(this.services.CoAuthoring.secret===undefined)this.services.CoAuthoring.secret={};"

  ${JSON} -e "if(this.services.CoAuthoring.secret.inbox===undefined)this.services.CoAuthoring.secret.inbox={};"
  ${JSON} -e "this.services.CoAuthoring.secret.inbox.string = '${JWT_SECRET}'"

  ${JSON} -e "if(this.services.CoAuthoring.secret.outbox===undefined)this.services.CoAuthoring.secret.outbox={};"
  ${JSON} -e "this.services.CoAuthoring.secret.outbox.string = '${JWT_SECRET}'"

  ${JSON} -e "if(this.services.CoAuthoring.secret.session===undefined)this.services.CoAuthoring.secret.session={};"
  ${JSON} -e "this.services.CoAuthoring.secret.session.string = '${JWT_SECRET}'"
  
  ${JSON} -e "if(this.services.CoAuthoring.token.inbox===undefined)this.services.CoAuthoring.token.inbox={};"
  ${JSON} -e "this.services.CoAuthoring.token.inbox.header = '${JWT_HEADER}'"

  ${JSON} -e "if(this.services.CoAuthoring.token.outbox===undefined)this.services.CoAuthoring.token.outbox={};"
  ${JSON} -e "this.services.CoAuthoring.token.outbox.header = '${JWT_HEADER}'"

  if [ -f "${EXAMPLE_CONFIG}" ]; then
    ${JSON_EXAMPLE} -e "if(this.server===undefined)this.server={};"
    ${JSON_EXAMPLE} -e "if(this.server.token===undefined)this.server.token={};"

    if [ "${JWT_ENABLED}" = "true" ] || [ "${JWT_ENABLED}" = "false" ]; then
      ${JSON_EXAMPLE} -e "this.server.token.enable = ${JWT_ENABLED}"
    fi
    ${JSON_EXAMPLE} -e "this.server.token.secret = '${JWT_SECRET}'"
    ${JSON_EXAMPLE} -e "this.server.token.authorizationHeader = '${JWT_HEADER}'"
  fi
}

setup_nginx(){
   DS_CONF=$CONF_DIR/nginx/ds.conf
  
  db_get onlyoffice/ds-port || true
  DS_PORT="$RET"
  
  # db_get M4_ONLYOFFICE_VALUE/docservice-port || true
  # DOCSERVICE_PORT="$RET"
  
  # db_get M4_ONLYOFFICE_VALUE/spellchecker-port || true
  # SPELLCHECKER_PORT="$RET"
  
  # db_get M4_ONLYOFFICE_VALUE/example-port || true
  # EXAMPLE_PORT="$RET"
  
  # setup ds port
  sed 's/\(listen .*:\)\([0-9]\{2,5\}\b\)\( default_server\)\?\(;\)/\1'${DS_PORT}'\3\4/' -i $DS_CONF

  # check if ipv6 supported otherwise remove it from nginx config
  if [ ! -f /proc/net/if_inet6 ]; then
    sed '/listen\s\+\[::[0-9]*\].\+/d' -i $DS_CONF
  fi

  # install nginx config
  if [ -d /etc/nginx/conf.d ] && [ -e /etc/nginx/conf.d/onlyoffice-documentserver.conf ]; then
    mv /etc/nginx/conf.d/onlyoffice-documentserver.conf /etc/nginx/conf.d/onlyoffice-documentserver.conf.old
  fi

  if [ -d /etc/nginx/conf.d ] && [ ! -e /etc/nginx/conf.d/ds.conf ]; then
	  ln -s $DS_CONF /etc/nginx/conf.d/ds.conf
  fi

  # sed 's/{{DOCSERVICE_PORT}}/'${DOCSERVICE_PORT}'/'  -i $OO_CONF
  # sed 's/{{SPELLCHECKER_PORT}}/'${SPELLCHECKER_PORT}'/'  -i $OO_CONF
  # sed 's/{{EXAMPLE_PORT}}/'${EXAMPLE_PORT}'/'  -i $OO_CONF
		
  rm -f /etc/nginx/sites-enabled/default

}

case "$1" in
	configure)
		adduser --quiet --home "$DIR" --system --group ds

		# add nginx user to M4_ONLYOFFICE_VALUE group to allow access nginx to M4_ONLYOFFICE_VALUE log dir
		adduser --quiet www-data ds

		create_local_configs
		read_saved_params
		install_db
		save_db_params
		save_rabbitmq_params
		save_jwt_params

		# configure ngninx for M4_ONLYOFFICE_VALUE
		setup_nginx

		# modify permissions for M4_ONLYOFFICE_VALUE files and folders
		mkdir -p "$LOG_DIR/docservice"
		mkdir -p "$LOG_DIR-example"
		mkdir -p "$LOG_DIR/converter"
		mkdir -p "$LOG_DIR/spellchecker"
		mkdir -p "$LOG_DIR/metrics"

		mkdir -p "$APP_DIR/App_Data"
		mkdir -p "$APP_DIR/App_Data/cache/files"
		mkdir -p "$APP_DIR/App_Data/docbuilder"
		mkdir -p "$APP_DIR-example/files"

		mkdir -p "$DIR/../Data" #! 
		mkdir -p "$DIR/fonts"
		chown ds:ds -R "$DIR"

    #setup logrotate config rights
    chmod 644 ${CONF_DIR}/logrotate/*
    chown root:root ${CONF_DIR}/logrotate/*

		# generate allfonts.js and thumbnail
		documentserver-generate-allfonts.sh true

		chown ds:ds -R "$LOG_DIR"
		chown ds:ds -R "$APP_DIR"
		chown ds:ds -R "$APP_DIR-example"

		# call db_stop to prevent installation hang
		db_stop

		# restart dependent services
		service supervisor restart >/dev/null 2>&1
		service nginx restart >/dev/null 2>&1
		
		echo "Congratulations, the ONLYOFFICE documentserver has been installed successfully!"
	;;

	abort-upgrade|abort-remove|abort-deconfigure)
	;;
	
	triggered)
		documentserver-generate-allfonts.sh true
	;;
	
	*)
		echo "postinst called with unknown argument \$1" >&2
		exit 1
	;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

# Automatically added by dh_makeshlibs
if [ "$1" = "configure" ]; then
	ldconfig
fi
# End automatically added section


exit 0
